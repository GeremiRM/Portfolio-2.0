{"ast":null,"code":"/**\n * Clean up a scene's materials and geometry\n */\nexport const cleanScene = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n    object.geometry.dispose();\n\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      for (const material of object.material) {\n        cleanMaterial(material);\n      }\n    }\n  });\n};\n/**\n * Clean up and dispose of a material\n */\n\nexport const cleanMaterial = material => {\n  material.dispose();\n\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n/**\n * Clean up and dispose of a renderer\n */\n\nexport const cleanRenderer = renderer => {\n  renderer.dispose();\n  renderer.forceContextLoss();\n  renderer = null;\n};\n/**\n * Clean up lights by removing them from their parent\n */\n\nexport const removeLights = lights => {\n  for (const light of lights) {\n    light.parent.remove(light);\n  }\n};","map":{"version":3,"sources":["/home/rinspiron/Desktop/portfolio/portfolio/components/utils/three.js"],"names":["cleanScene","scene","traverse","object","isMesh","geometry","dispose","material","isMaterial","cleanMaterial","key","Object","keys","value","cleanRenderer","renderer","forceContextLoss","removeLights","lights","light","parent","remove"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAGC,KAAK,IAAI;AAC/BA,EAAAA,KAAK,CAACC,QAAN,CAAeC,MAAM,IAAI;AACvB,QAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB;AAEpBD,IAAAA,MAAM,CAACE,QAAP,CAAgBC,OAAhB;;AAEA,QAAIH,MAAM,CAACI,QAAP,CAAgBC,UAApB,EAAgC;AAC9BC,MAAAA,aAAa,CAACN,MAAM,CAACI,QAAR,CAAb;AACD,KAFD,MAEO;AACL,WAAK,MAAMA,QAAX,IAAuBJ,MAAM,CAACI,QAA9B,EAAwC;AACtCE,QAAAA,aAAa,CAACF,QAAD,CAAb;AACD;AACF;AACF,GAZD;AAaD,CAdI;AAgBL;AACF;AACA;;AACE,OAAO,MAAME,aAAa,GAAGF,QAAQ,IAAI;AACvCA,EAAAA,QAAQ,CAACD,OAAT;;AAEA,OAAK,MAAMI,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAlB,EAAyC;AACvC,UAAMM,KAAK,GAAGN,QAAQ,CAACG,GAAD,CAAtB;;AACA,QAAIG,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,eAAeA,KAAzD,EAAgE;AAC9DA,MAAAA,KAAK,CAACP,OAAN;AACD;AACF;AACF,CATM;AAWP;AACF;AACA;;AACE,OAAO,MAAMQ,aAAa,GAAGC,QAAQ,IAAI;AACvCA,EAAAA,QAAQ,CAACT,OAAT;AACAS,EAAAA,QAAQ,CAACC,gBAAT;AACAD,EAAAA,QAAQ,GAAG,IAAX;AACD,CAJM;AAMP;AACF;AACA;;AACE,OAAO,MAAME,YAAY,GAAGC,MAAM,IAAI;AACpC,OAAK,MAAMC,KAAX,IAAoBD,MAApB,EAA4B;AAC1BC,IAAAA,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBF,KAApB;AACD;AACF,CAJM","sourcesContent":["/**\n * Clean up a scene's materials and geometry\n */\nexport const cleanScene = scene => {\n    scene.traverse(object => {\n      if (!object.isMesh) return;\n  \n      object.geometry.dispose();\n  \n      if (object.material.isMaterial) {\n        cleanMaterial(object.material);\n      } else {\n        for (const material of object.material) {\n          cleanMaterial(material);\n        }\n      }\n    });\n  };\n  \n  /**\n   * Clean up and dispose of a material\n   */\n  export const cleanMaterial = material => {\n    material.dispose();\n  \n    for (const key of Object.keys(material)) {\n      const value = material[key];\n      if (value && typeof value === 'object' && 'minFilter' in value) {\n        value.dispose();\n      }\n    }\n  };\n  \n  /**\n   * Clean up and dispose of a renderer\n   */\n  export const cleanRenderer = renderer => {\n    renderer.dispose();\n    renderer.forceContextLoss();\n    renderer = null;\n  };\n  \n  /**\n   * Clean up lights by removing them from their parent\n   */\n  export const removeLights = lights => {\n    for (const light of lights) {\n      light.parent.remove(light);\n    }\n  };"]},"metadata":{},"sourceType":"module"}