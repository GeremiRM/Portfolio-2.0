{"ast":null,"code":"import _slicedToArray from \"/home/rinspiron/Desktop/portfolio/portfolio/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nfunction useInViewport(elementRef, unobserveOnIntersect) {\n  _s();\n\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var shouldObserve = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var _useState = useState(false),\n      intersect = _useState[0],\n      setIntersect = _useState[1];\n\n  var _useState2 = useState(false),\n      isUnobserved = _useState2[0],\n      setIsUnobserved = _useState2[1];\n\n  useEffect(function () {\n    if (!(elementRef !== null && elementRef !== void 0 && elementRef.current)) return;\n    var observer = new IntersectionObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          entry = _ref2[0];\n\n      var isIntersecting = entry.isIntersecting,\n          target = entry.target;\n      setIntersect(isIntersecting);\n\n      if (isIntersecting && unobserveOnIntersect) {\n        observer.unobserve(target);\n        setIsUnobserved(true);\n      }\n    }, options);\n\n    if (!isUnobserved && shouldObserve) {\n      observer.observe(elementRef.current);\n    }\n\n    return function () {\n      return observer.disconnect();\n    };\n  }, [elementRef, unobserveOnIntersect, options, isUnobserved, shouldObserve]);\n  return intersect;\n}\n\n_s(useInViewport, \"C9dlr0sue9RRlQ01r1V61pLZP4Q=\");\n\nexport default useInViewport;","map":{"version":3,"sources":["/home/rinspiron/Desktop/portfolio/portfolio/components/hooks/useInViewport.js"],"names":["useEffect","useState","useInViewport","elementRef","unobserveOnIntersect","options","shouldObserve","intersect","setIntersect","isUnobserved","setIsUnobserved","current","observer","IntersectionObserver","entry","isIntersecting","target","unobserve","observe","disconnect"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,aAAT,CACEC,UADF,EAEEC,oBAFF,EAKE;AAAA;;AAAA,MAFAC,OAEA,uEAFU,EAEV;AAAA,MADAC,aACA,uEADgB,IAChB;;AAAA,kBACkCL,QAAQ,CAAC,KAAD,CAD1C;AAAA,MACOM,SADP;AAAA,MACkBC,YADlB;;AAAA,mBAEwCP,QAAQ,CAAC,KAAD,CAFhD;AAAA,MAEOQ,YAFP;AAAA,MAEqBC,eAFrB;;AAIAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,EAACG,UAAD,aAACA,UAAD,eAACA,UAAU,CAAEQ,OAAb,CAAJ,EAA0B;AAE1B,QAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,gBAAa;AAAA;AAAA,UAAXC,KAAW;;AAAA,UAC7CC,cAD6C,GAClBD,KADkB,CAC7CC,cAD6C;AAAA,UAC7BC,MAD6B,GAClBF,KADkB,CAC7BE,MAD6B;AAGrDR,MAAAA,YAAY,CAACO,cAAD,CAAZ;;AAEA,UAAIA,cAAc,IAAIX,oBAAtB,EAA4C;AAC1CQ,QAAAA,QAAQ,CAACK,SAAT,CAAmBD,MAAnB;AACAN,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,KATgB,EASdL,OATc,CAAjB;;AAWA,QAAI,CAACI,YAAD,IAAiBH,aAArB,EAAoC;AAClCM,MAAAA,QAAQ,CAACM,OAAT,CAAiBf,UAAU,CAACQ,OAA5B;AACD;;AAED,WAAO;AAAA,aAAMC,QAAQ,CAACO,UAAT,EAAN;AAAA,KAAP;AACD,GAnBQ,EAmBN,CAAChB,UAAD,EAAaC,oBAAb,EAAmCC,OAAnC,EAA4CI,YAA5C,EAA0DH,aAA1D,CAnBM,CAAT;AAqBA,SAAOC,SAAP;AACD;;GA/BQL,a;;AAiCT,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction useInViewport(\n  elementRef,\n  unobserveOnIntersect,\n  options = {},\n  shouldObserve = true\n) {\n  const [intersect, setIntersect] = useState(false);\n  const [isUnobserved, setIsUnobserved] = useState(false);\n\n  useEffect(() => {\n    if (!elementRef?.current) return;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      const { isIntersecting, target } = entry;\n\n      setIntersect(isIntersecting);\n\n      if (isIntersecting && unobserveOnIntersect) {\n        observer.unobserve(target);\n        setIsUnobserved(true);\n      }\n    }, options);\n\n    if (!isUnobserved && shouldObserve) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [elementRef, unobserveOnIntersect, options, isUnobserved, shouldObserve]);\n\n  return intersect;\n}\n\nexport default useInViewport;\n"]},"metadata":{},"sourceType":"module"}