{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nconst introDir = path.join(process.cwd(), \"data/introduction\");\nexport default function getIntrodutionData() {\n  const fileNames = fs.readdirSync(introDir);\n  const allIntroGigs = fileNames.map(fileName => {\n    const org = fileName.replace(/\\.json$/, \"\");\n    const fullPath = path.join(introDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf-8\");\n    const gigData = JSON.parse(fileContents);\n    return _objectSpread({\n      id: org\n    }, gigData);\n  });\n  return allIntroGigs;\n}","map":{"version":3,"sources":["/home/rinspiron/Desktop/portfolio/portfolio/lib/introduction.js"],"names":["fs","path","introDir","join","process","cwd","getIntrodutionData","fileNames","readdirSync","allIntroGigs","map","fileName","org","replace","fullPath","fileContents","readFileSync","gigData","JSON","parse","id"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,mBAAzB,CAAjB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAC3C,QAAMC,SAAS,GAAGP,EAAE,CAACQ,WAAH,CAAeN,QAAf,CAAlB;AAEA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAC/C,UAAMC,GAAG,GAAGD,QAAQ,CAACE,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAZ;AACA,UAAMC,QAAQ,GAAGb,IAAI,CAACE,IAAL,CAAUD,QAAV,EAAoBS,QAApB,CAAjB;AACA,UAAMI,YAAY,GAAGf,EAAE,CAACgB,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAArB;AACA,UAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAhB;AAEA;AACEK,MAAAA,EAAE,EAAER;AADN,OAEKK,OAFL;AAID,GAVoB,CAArB;AAYA,SAAOR,YAAP;AACD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nconst introDir = path.join(process.cwd(), \"data/introduction\");\n\nexport default function getIntrodutionData() {\n  const fileNames = fs.readdirSync(introDir);\n\n  const allIntroGigs = fileNames.map((fileName) => {\n    const org = fileName.replace(/\\.json$/, \"\");\n    const fullPath = path.join(introDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf-8\");\n    const gigData = JSON.parse(fileContents);\n\n    return {\n      id: org,\n      ...gigData,\n    };\n  });\n\n  return allIntroGigs;\n}\n"]},"metadata":{},"sourceType":"module"}