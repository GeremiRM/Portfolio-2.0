{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nfunction useInViewport(elementRef, unobserveOnIntersect, options = {}, shouldObserve = true) {\n  const {\n    0: intersect,\n    1: setIntersect\n  } = useState(false);\n  const {\n    0: isUnobserved,\n    1: setIsUnobserved\n  } = useState(false);\n  useEffect(() => {\n    if (!(elementRef !== null && elementRef !== void 0 && elementRef.current)) return;\n    const observer = new IntersectionObserver(([entry]) => {\n      const {\n        isIntersecting,\n        target\n      } = entry;\n      setIntersect(isIntersecting);\n\n      if (isIntersecting && unobserveOnIntersect) {\n        observer.unobserve(target);\n        setIsUnobserved(true);\n      }\n    }, options);\n\n    if (!isUnobserved && shouldObserve) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [elementRef, unobserveOnIntersect, options, isUnobserved, shouldObserve]);\n  return intersect;\n}\n\nexport default useInViewport;","map":{"version":3,"sources":["/home/rinspiron/Desktop/portfolio/portfolio/components/hooks/useInViewport.js"],"names":["useEffect","useState","useInViewport","elementRef","unobserveOnIntersect","options","shouldObserve","intersect","setIntersect","isUnobserved","setIsUnobserved","current","observer","IntersectionObserver","entry","isIntersecting","target","unobserve","observe","disconnect"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,aAAT,CACEC,UADF,EAEEC,oBAFF,EAGEC,OAAO,GAAG,EAHZ,EAIEC,aAAa,GAAG,IAJlB,EAKE;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACQ,YAAD;AAAA,OAAeC;AAAf,MAAkCT,QAAQ,CAAC,KAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,EAACG,UAAD,aAACA,UAAD,eAACA,UAAU,CAAEQ,OAAb,CAAJ,EAA0B;AAE1B,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAAC,CAACC,KAAD,CAAD,KAAa;AACrD,YAAM;AAAEC,QAAAA,cAAF;AAAkBC,QAAAA;AAAlB,UAA6BF,KAAnC;AAEAN,MAAAA,YAAY,CAACO,cAAD,CAAZ;;AAEA,UAAIA,cAAc,IAAIX,oBAAtB,EAA4C;AAC1CQ,QAAAA,QAAQ,CAACK,SAAT,CAAmBD,MAAnB;AACAN,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,KATgB,EASdL,OATc,CAAjB;;AAWA,QAAI,CAACI,YAAD,IAAiBH,aAArB,EAAoC;AAClCM,MAAAA,QAAQ,CAACM,OAAT,CAAiBf,UAAU,CAACQ,OAA5B;AACD;;AAED,WAAO,MAAMC,QAAQ,CAACO,UAAT,EAAb;AACD,GAnBQ,EAmBN,CAAChB,UAAD,EAAaC,oBAAb,EAAmCC,OAAnC,EAA4CI,YAA5C,EAA0DH,aAA1D,CAnBM,CAAT;AAqBA,SAAOC,SAAP;AACD;;AAED,eAAeL,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction useInViewport(\n  elementRef,\n  unobserveOnIntersect,\n  options = {},\n  shouldObserve = true\n) {\n  const [intersect, setIntersect] = useState(false);\n  const [isUnobserved, setIsUnobserved] = useState(false);\n\n  useEffect(() => {\n    if (!elementRef?.current) return;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      const { isIntersecting, target } = entry;\n\n      setIntersect(isIntersecting);\n\n      if (isIntersecting && unobserveOnIntersect) {\n        observer.unobserve(target);\n        setIsUnobserved(true);\n      }\n    }, options);\n\n    if (!isUnobserved && shouldObserve) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [elementRef, unobserveOnIntersect, options, isUnobserved, shouldObserve]);\n\n  return intersect;\n}\n\nexport default useInViewport;\n"]},"metadata":{},"sourceType":"module"}