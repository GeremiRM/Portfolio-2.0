{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nconst projectsDir = path.join(process.cwd(), \"data/projects\");\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default function getProjectData() {\n  const fileNames = fs.readdirSync(projectsDir);\n  return fileNames.map(fileName => {\n    const project = capitalizeFirstLetter(fileName.replace(/\\.json$/, \"\").replace(\"-\", \" \"));\n    const fullPath = path.join(projectsDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf-8\");\n    const projectData = JSON.parse(fileContents);\n    return _objectSpread({\n      id: project\n    }, projectData);\n  });\n}","map":{"version":3,"sources":["/home/rinspiron/Desktop/portfolio/portfolio/lib/projects.js"],"names":["fs","path","projectsDir","join","process","cwd","capitalizeFirstLetter","string","charAt","toUpperCase","slice","getProjectData","fileNames","readdirSync","map","fileName","project","replace","fullPath","fileContents","readFileSync","projectData","JSON","parse","id"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,WAAW,GAAGD,IAAI,CAACE,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,eAAzB,CAApB;;AAEA,SAASC,qBAAT,CAA+BC,MAA/B,EAAuC;AACrC,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD;;AAED,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAMC,SAAS,GAAGZ,EAAE,CAACa,WAAH,CAAeX,WAAf,CAAlB;AAEA,SAAOU,SAAS,CAACE,GAAV,CAAeC,QAAD,IAAc;AACjC,UAAMC,OAAO,GAAGV,qBAAqB,CACnCS,QAAQ,CAACE,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,EAAgCA,OAAhC,CAAwC,GAAxC,EAA6C,GAA7C,CADmC,CAArC;AAGA,UAAMC,QAAQ,GAAGjB,IAAI,CAACE,IAAL,CAAUD,WAAV,EAAuBa,QAAvB,CAAjB;AACA,UAAMI,YAAY,GAAGnB,EAAE,CAACoB,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAArB;AACA,UAAMG,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAApB;AAEA;AACEK,MAAAA,EAAE,EAAER;AADN,OAEKK,WAFL;AAID,GAZM,CAAP;AAaD","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nconst projectsDir = path.join(process.cwd(), \"data/projects\");\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default function getProjectData() {\n  const fileNames = fs.readdirSync(projectsDir);\n\n  return fileNames.map((fileName) => {\n    const project = capitalizeFirstLetter(\n      fileName.replace(/\\.json$/, \"\").replace(\"-\", \" \")\n    );\n    const fullPath = path.join(projectsDir, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf-8\");\n    const projectData = JSON.parse(fileContents);\n\n    return {\n      id: project,\n      ...projectData,\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}